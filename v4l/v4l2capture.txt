
at least on raspi, the 'pip install v4l2capture' version is old
* it does NOT have all the funcs below
build from source
* download zip file (or git clone)
* ./setup.py build
* if needed, sudo pip uninstall v4l2capture (to get rid of old)
* sudo ./setup.py install


https://github.com/atareao/python3-v4l2capture/blob/master/v4l2capture.c
.. line 751 shows the video-device methods available:

  {"close", (PyCFunction)Video_device_close, METH_NOARGS,
       "close()\n\n"
       "Close video device. Subsequent calls to other methods will fail."},
  {"fileno", (PyCFunction)Video_device_fileno, METH_NOARGS,
       "fileno() -> integer \"file descriptor\".\n\n"
       "This enables video devices to be passed select.select for waiting "
       "until a frame is available for reading."},
  {"get_info", (PyCFunction)Video_device_get_info, METH_NOARGS,
       "get_info() -> driver, card, bus_info, capabilities\n\n"
       "Returns three strings with information about the video device, and one "
       "set containing strings identifying the capabilities of the video "
       "device."},
  {"get_fourcc", (PyCFunction)Video_device_get_fourcc, METH_VARARGS,
       "get_fourcc(fourcc_string) -> fourcc_int\n\n"
       "Return the fourcc string encoded as int."},
  {"get_format", (PyCFunction)Video_device_get_format, METH_NOARGS,
       "get_format() -> size_x, size_y, fourcc\n\n"
       "Request the current video format."},
  {"set_format", (PyCFunction)Video_device_set_format, METH_VARARGS|METH_KEYWORDS,
       "set_format(size_x, size_y, yuv420 = 0, fourcc='MJPEG') -> size_x, size_y\n\n"
       "Request the video device to set image size and format. The device may "
       "choose another size than requested and will return its choice. The "
       "image format will be RGB24 if yuv420 is zero (default) or YUV420 if "
       "yuv420 is 1, if fourcc keyword is set that will be the fourcc pixel format used."},
  {"set_fps", (PyCFunction)Video_device_set_fps, METH_VARARGS,
       "set_fps(fps) -> fps \n\n"
       "Request the video device to set frame per seconds.The device may "
       "choose another frame rate than requested and will return its choice. " },
  {"set_auto_white_balance", (PyCFunction)Video_device_set_auto_white_balance, METH_VARARGS,
       "set_auto_white_balance(autowb) -> autowb \n\n"
       "Request the video device to set auto white balance to value. The device may "
       "choose another value than requested and will return its choice. " },
  {"get_auto_white_balance", (PyCFunction)Video_device_get_auto_white_balance, METH_NOARGS,
       "get_auto_white_balance() -> autowb \n\n"
       "Request the video device to get auto white balance value. " },
  {"set_white_balance_temperature", (PyCFunction)Video_device_set_white_balance_temperature, METH_VARARGS,
       "set_white_balance_temperature(temp) -> temp \n\n"
       "Request the video device to set white balance tempature to value. The device may "
       "choose another value than requested and will return its choice. " },
  {"get_white_balance_temperature", (PyCFunction)Video_device_get_white_balance_temperature, METH_NOARGS,
       "get_white_balance_temperature() -> temp \n\n"
       "Request the video device to get white balance temperature value. " },
  {"set_exposure_auto", (PyCFunction)Video_device_set_exposure_auto, METH_VARARGS,
       "set_exposure_auto(autoexp) -> autoexp \n\n"
       "Request the video device to set auto exposure to value. The device may "
       "choose another value than requested and will return its choice. " },
  {"get_exposure_auto", (PyCFunction)Video_device_get_exposure_auto, METH_NOARGS,
       "get_exposure_auto() -> autoexp \n\n"
       "Request the video device to get auto exposure value. " },
  {"set_exposure_absolute", (PyCFunction)Video_device_set_exposure_absolute, METH_VARARGS,
       "set_exposure_absolute(exptime) -> exptime \n\n"
       "Request the video device to set exposure time to value. The device may "
       "choose another value than requested and will return its choice. " },
  {"get_exposure_absolute", (PyCFunction)Video_device_get_exposure_absolute, METH_NOARGS,
       "get_exposure_absolute() -> exptime \n\n"
       "Request the video device to get exposure time value. " },
  {"set_focus_auto", (PyCFunction)Video_device_set_focus_auto, METH_VARARGS,
       "set_auto_focus_auto(autofocus) -> autofocus \n\n"
       "Request the video device to set auto focuse on or off. The device may "
       "choose another value than requested and will return its choice. " },
  {"get_focus_auto", (PyCFunction)Video_device_get_focus_auto, METH_NOARGS,
       "get_focus_auto() -> autofocus \n\n"
       "Request the video device to get auto focus value. " },
  {"start", (PyCFunction)Video_device_start, METH_NOARGS,
       "start()\n\n"
       "Start video capture."},
  {"stop", (PyCFunction)Video_device_stop, METH_NOARGS,
       "stop()\n\n"
       "Stop video capture."},
  {"create_buffers", (PyCFunction)Video_device_create_buffers, METH_VARARGS,
       "create_buffers(count)\n\n"
       "Create buffers used for capturing image data. Can only be called once "
       "for each video device object."},
  {"queue_all_buffers", (PyCFunction)Video_device_queue_all_buffers,
       METH_NOARGS,
       "queue_all_buffers()\n\n"
       "Let the video device fill all buffers created."},
  {"read", (PyCFunction)Video_device_read, METH_NOARGS,
       "read() -> string\n\n"
       "Reads image data from a buffer that has been filled by the video "
       "device. The image data is in RGB och YUV420 format as decided by "
       "'set_format'. The buffer is removed from the queue. Fails if no buffer "
       "is filled. Use select.select to check for filled buffers."},
  {"read_and_queue", (PyCFunction)Video_device_read_and_queue, METH_NOARGS,
       "read_and_queue()\n\n"
       "Same as 'read', but adds the buffer back to the queue so the video "
       "device can fill it again."},

